"use strict";(async()=>{const e=["article"],t=[{selector:"div",containerSelector:"div.weblayer--blank"}],s=import(chrome.runtime.getURL("utils/hideTargets.js")),n=import(chrome.runtime.getURL("utils/getDefaultSelectors.js")),r=import(chrome.runtime.getURL("utils/getShadowDomTargetContent.js")),i=import(chrome.runtime.getURL("utils/hideShadowDomTargets.js")),[o,a,c,l]=await Promise.all([s,n,r,i]),d=a.getDefaultSelectors();let m=null;async function u(){await chrome.runtime.sendMessage({type:"GET_IS_BLOCKING"})?async function(){const s=await async function(){return await chrome.runtime.sendMessage({type:"GET_TARGETS"})}(),n=await chrome.runtime.sendMessage({type:"GET_STYLE"});o.hideTargets({targets:s,hideStyle:n,selectors:d,containerSelectors:e}),l.hideShadowDomTargets({targets:s,hideStyle:n,shadowDomSelectors:t,getShadowDomTargetContentModule:c}),function({targets:t,hideStyle:s}){m&&m.disconnect(),m=new MutationObserver((n=>{o.hideTargets({targets:t,hideStyle:s,selectors:d,containerSelectors:e})})),m.observe(document.body,{childList:!0,subtree:!0,characterData:!0})}({targets:s,hideStyle:n})}():async function(){m&&m.disconnect();document.querySelectorAll(".silent-blocking-extension").forEach((e=>{e.classList.remove("silent-blocking-extension"),e.classList.remove("hidden"),e.removeAttribute("data-silent-blocking-extension")}))}()}u(),chrome.runtime.onMessage.addListener((async(e,t,s)=>{if("REINIT_BLOCKING"===e.type)return u(),s(!0)}))})();